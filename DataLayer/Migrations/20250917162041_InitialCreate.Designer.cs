// <auto-generated />
using System;
using DataLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(Clinicdbcontext))]
    [Migration("20250917162041_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppointmentStatusEntity", b =>
                {
                    b.Property<int>("Status_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Status_ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Status_ID");

                    b.ToTable("AppointmentStatus");
                });

            modelBuilder.Entity("AppointmentTypeEntity", b =>
                {
                    b.Property<int>("Type_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Type_ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Type_ID");

                    b.ToTable("AppointmentType");
                });

            modelBuilder.Entity("DataLayer.Entities.AccountEntity", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountID"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("AccountProviderID_FK")
                        .HasColumnType("smallint");

                    b.HasKey("AccountID");

                    b.HasIndex("AccountProviderID_FK");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DataLayer.Entities.AppointmentEntity", b =>
                {
                    b.Property<int>("Appointment_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Appointment_ID"));

                    b.Property<DateTime>("Appointment_Date_Time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Appointment_Duration_Minutes")
                        .HasColumnType("int");

                    b.Property<int>("Appointment_Type_ID_FK")
                        .HasColumnType("int");

                    b.Property<int>("Clinic_ID_FK")
                        .HasColumnType("int");

                    b.Property<int>("Consultation_Mode_ID_FK")
                        .HasColumnType("int");

                    b.Property<int>("Doctor_ID_FK")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Patient_ID_FK")
                        .HasColumnType("int");

                    b.Property<int>("Status_ID_FK")
                        .HasColumnType("int");

                    b.HasKey("Appointment_ID");

                    b.HasIndex("Appointment_Type_ID_FK");

                    b.HasIndex("Clinic_ID_FK");

                    b.HasIndex("Consultation_Mode_ID_FK");

                    b.HasIndex("Doctor_ID_FK");

                    b.HasIndex("Patient_ID_FK");

                    b.HasIndex("Status_ID_FK");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("DataLayer.Entities.ClinicEntity", b =>
                {
                    b.Property<int>("ClinicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClinicID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ClinicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime");

                    b.Property<string>("LocationDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime");

                    b.HasKey("ClinicID");

                    b.ToTable("Clinic");
                });

            modelBuilder.Entity("DataLayer.Entities.ConsultationModeEntity", b =>
                {
                    b.Property<int>("ModeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModeID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Mode_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ModeID");

                    b.ToTable("ConsultationModes");
                });

            modelBuilder.Entity("DataLayer.Entities.DoctorEntity", b =>
                {
                    b.Property<int>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorID"));

                    b.Property<int>("ClinicID")
                        .HasColumnType("int");

                    b.Property<int>("ClinicID_FK")
                        .HasColumnType("int");

                    b.Property<short>("DoctorTypeID_FK")
                        .HasColumnType("smallint");

                    b.Property<int>("Employee_ID_FK")
                        .HasColumnType("int");

                    b.Property<bool?>("Is_On_Call")
                        .HasColumnType("bit");

                    b.Property<string>("MedicalLicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar");

                    b.Property<short?>("Years_of_Experience")
                        .HasColumnType("smallint");

                    b.HasKey("DoctorID");

                    b.HasIndex("ClinicID");

                    b.HasIndex("DoctorTypeID_FK");

                    b.HasIndex("Employee_ID_FK")
                        .IsUnique();

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("DataLayer.Entities.DoctorTypeEntity", b =>
                {
                    b.Property<short>("DoctorTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("DoctorTypeID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("DoctorTypeID");

                    b.ToTable("DoctorTypes");
                });

            modelBuilder.Entity("DataLayer.Entities.EmployeeEntity", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<short>("EmpployeeTypeID_FK")
                        .HasColumnType("smallint");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PersonID_FK")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EmployeeID");

                    b.HasIndex("EmpployeeTypeID_FK");

                    b.HasIndex("PersonID_FK")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DataLayer.Entities.EmployeeTypeEntity", b =>
                {
                    b.Property<short>("EmployeeTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("EmployeeTypeID"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EmployeeTypeID");

                    b.ToTable("employeeTypes");
                });

            modelBuilder.Entity("DataLayer.Entities.MedicalRecordEntity", b =>
                {
                    b.Property<int>("MRNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MRNID"));

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ChronicDiseases")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("int");

                    b.HasKey("MRNID");

                    b.HasIndex("PatientID_FK");

                    b.ToTable("MedicalRecord");
                });

            modelBuilder.Entity("DataLayer.Entities.NurseEntity", b =>
                {
                    b.Property<short>("NurseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("NurseID"));

                    b.Property<int>("ClinicID_FK")
                        .HasColumnType("int");

                    b.Property<int>("Employee_ID_FK")
                        .HasColumnType("int");

                    b.HasKey("NurseID");

                    b.HasIndex("ClinicID_FK");

                    b.HasIndex("Employee_ID_FK")
                        .IsUnique();

                    b.ToTable("Nurse");
                });

            modelBuilder.Entity("DataLayer.Entities.PatientEntity", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientID"));

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PatientPersonID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDatew")
                        .HasColumnType("datetime");

                    b.HasKey("PatientID");

                    b.HasIndex("PatientPersonID")
                        .IsUnique();

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("DataLayer.Entities.PaymentEntity", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("AppointmentID_FK")
                        .HasColumnType("int");

                    b.Property<int?>("FromAccountID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("ProviderID")
                        .HasColumnType("smallint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ToAccountID")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.HasIndex("AppointmentID_FK")
                        .IsUnique();

                    b.HasIndex("FromAccountID");

                    b.HasIndex("ProviderID");

                    b.HasIndex("ToAccountID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("DataLayer.Entities.PaymentProviderEntity", b =>
                {
                    b.Property<short>("ProviderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("ProviderID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ProviderID");

                    b.ToTable("PaymentProviders");
                });

            modelBuilder.Entity("DataLayer.Entities.PersonEntity", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<short?>("Age")
                        .HasColumnType("smallint");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserID_FK")
                        .HasColumnType("int");

                    b.HasKey("PersonID");

                    b.HasIndex("UserID_FK")
                        .IsUnique()
                        .HasFilter("[UserID_FK] IS NOT NULL");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("DataLayer.Entities.ScheduleEntity", b =>
                {
                    b.Property<int>("ScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleID"));

                    b.Property<DateTime>("ActualEndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ActualStartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("EmployeeID_FK")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime");

                    b.HasKey("ScheduleID");

                    b.HasIndex("EmployeeID_FK")
                        .IsUnique();

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("DataLayer.Entities.UserEntity", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("Permissions")
                        .HasColumnType("smallint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataLayer.Entities.AccountEntity", b =>
                {
                    b.HasOne("DataLayer.Entities.PaymentProviderEntity", "PaymentProvider")
                        .WithMany("accounts")
                        .HasForeignKey("AccountProviderID_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentProvider");
                });

            modelBuilder.Entity("DataLayer.Entities.AppointmentEntity", b =>
                {
                    b.HasOne("AppointmentTypeEntity", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("Appointment_Type_ID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.ClinicEntity", "Clinic")
                        .WithMany("Appointments")
                        .HasForeignKey("Clinic_ID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.ConsultationModeEntity", "ConsultationMode")
                        .WithMany("Appointmentsnt")
                        .HasForeignKey("Consultation_Mode_ID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.DoctorEntity", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("Doctor_ID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.PatientEntity", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("Patient_ID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppointmentStatusEntity", "Status")
                        .WithMany("Appointments")
                        .HasForeignKey("Status_ID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppointmentType");

                    b.Navigation("Clinic");

                    b.Navigation("ConsultationMode");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DataLayer.Entities.DoctorEntity", b =>
                {
                    b.HasOne("DataLayer.Entities.ClinicEntity", "Clinic")
                        .WithMany("doctors")
                        .HasForeignKey("ClinicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.DoctorTypeEntity", "doctorType")
                        .WithMany("Doctor")
                        .HasForeignKey("DoctorTypeID_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.EmployeeEntity", "Employee")
                        .WithOne("doctor")
                        .HasForeignKey("DataLayer.Entities.DoctorEntity", "Employee_ID_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Employee");

                    b.Navigation("doctorType");
                });

            modelBuilder.Entity("DataLayer.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("DataLayer.Entities.EmployeeTypeEntity", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmpployeeTypeID_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.PersonEntity", "person")
                        .WithOne("Employee")
                        .HasForeignKey("DataLayer.Entities.EmployeeEntity", "PersonID_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeType");

                    b.Navigation("person");
                });

            modelBuilder.Entity("DataLayer.Entities.MedicalRecordEntity", b =>
                {
                    b.HasOne("DataLayer.Entities.PatientEntity", "Patient")
                        .WithMany("medicalRecords")
                        .HasForeignKey("PatientID_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DataLayer.Entities.NurseEntity", b =>
                {
                    b.HasOne("DataLayer.Entities.ClinicEntity", "ClinicID")
                        .WithMany("nurses")
                        .HasForeignKey("ClinicID_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.EmployeeEntity", "EmployeeID")
                        .WithOne("nurse")
                        .HasForeignKey("DataLayer.Entities.NurseEntity", "Employee_ID_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClinicID");

                    b.Navigation("EmployeeID");
                });

            modelBuilder.Entity("DataLayer.Entities.PatientEntity", b =>
                {
                    b.HasOne("DataLayer.Entities.PersonEntity", "Person")
                        .WithOne("patient")
                        .HasForeignKey("DataLayer.Entities.PatientEntity", "PatientPersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DataLayer.Entities.PaymentEntity", b =>
                {
                    b.HasOne("DataLayer.Entities.AppointmentEntity", "Appointment")
                        .WithOne("Payment")
                        .HasForeignKey("DataLayer.Entities.PaymentEntity", "AppointmentID_FK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.AccountEntity", "FromAccount")
                        .WithMany("PaymentsFrom")
                        .HasForeignKey("FromAccountID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataLayer.Entities.PaymentProviderEntity", "Provider")
                        .WithMany("Payments")
                        .HasForeignKey("ProviderID");

                    b.HasOne("DataLayer.Entities.AccountEntity", "ToAccount")
                        .WithMany("PaymentsTo")
                        .HasForeignKey("ToAccountID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Appointment");

                    b.Navigation("FromAccount");

                    b.Navigation("Provider");

                    b.Navigation("ToAccount");
                });

            modelBuilder.Entity("DataLayer.Entities.PersonEntity", b =>
                {
                    b.HasOne("DataLayer.Entities.UserEntity", "user")
                        .WithOne("Person")
                        .HasForeignKey("DataLayer.Entities.PersonEntity", "UserID_FK");

                    b.Navigation("user");
                });

            modelBuilder.Entity("DataLayer.Entities.ScheduleEntity", b =>
                {
                    b.HasOne("DataLayer.Entities.EmployeeEntity", "Employee")
                        .WithOne("schedule")
                        .HasForeignKey("DataLayer.Entities.ScheduleEntity", "EmployeeID_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AppointmentStatusEntity", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("AppointmentTypeEntity", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("DataLayer.Entities.AccountEntity", b =>
                {
                    b.Navigation("PaymentsFrom");

                    b.Navigation("PaymentsTo");
                });

            modelBuilder.Entity("DataLayer.Entities.AppointmentEntity", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Entities.ClinicEntity", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("doctors");

                    b.Navigation("nurses");
                });

            modelBuilder.Entity("DataLayer.Entities.ConsultationModeEntity", b =>
                {
                    b.Navigation("Appointmentsnt");
                });

            modelBuilder.Entity("DataLayer.Entities.DoctorEntity", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("DataLayer.Entities.DoctorTypeEntity", b =>
                {
                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DataLayer.Entities.EmployeeEntity", b =>
                {
                    b.Navigation("doctor")
                        .IsRequired();

                    b.Navigation("nurse")
                        .IsRequired();

                    b.Navigation("schedule")
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Entities.EmployeeTypeEntity", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DataLayer.Entities.PatientEntity", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("medicalRecords");
                });

            modelBuilder.Entity("DataLayer.Entities.PaymentProviderEntity", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("accounts");
                });

            modelBuilder.Entity("DataLayer.Entities.PersonEntity", b =>
                {
                    b.Navigation("Employee")
                        .IsRequired();

                    b.Navigation("patient")
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Entities.UserEntity", b =>
                {
                    b.Navigation("Person")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
